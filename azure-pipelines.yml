# azure-pipelines.yml
# CloudCart CI/CD Pipeline - Branch-based deployment

trigger:
  branches:
    include:
      - main
      - staging
      - develop

pr: none

pool:
  name: SandboxAgent

variables:
  azureSubscriptionDev: 'Azure-CloudCart-Connection'
  azureSubscriptionStg: 'Azure-CloudCart-Connection-stg'
  azureSubscriptionProd: 'Azure-CloudCart-Connection-prod'

  rgDev: 'rg-cloudcart-dev'
  rgStaging: 'rg-cloudcart-staging'
  rgProd: 'rg-cloudcart-prod'
  
  webAppDev: 'cloudcart-dev-webapp'
  webAppStaging: 'cloudcart-staging-webapp'
  webAppProd: 'cloudcart-prod-webapp'

  slotName: 'slot'
  nodeVersion: '22.x'

stages:
  # ============================================
  # STAGE 1: BUILD
  # ============================================
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildJob
        displayName: 'Build Node.js App'
        steps:
          - checkout: self

          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
            displayName: 'Install Node.js $(nodeVersion)'

          - script: |
              echo "üì¶ Installing dependencies..."
              npm ci --production
            displayName: 'Install dependencies'
            shell: bash
          
          - script: |
              echo "üß™ Running tests..."
              npm test || echo "Tests failed but continuing..."
            displayName: 'Run Tests'
            shell: bash
            continueOnError: true
          
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
              verbose: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  # ============================================
  # STAGE 2: DEPLOY TO DEVELOPMENT
  # ============================================
  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployDevJob
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "üîç Checking if package exists..."
                    ls -l $(Pipeline.Workspace)/drop
                  displayName: 'Verify artifact path'
                  shell: bash

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Dev)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionDev)'
                    appType: 'webAppLinux'
                    appName: '$(webAppDev)'
                    resourceGroupName: '$(rgDev)'
                    package: '$(Pipeline.Workspace)/drop/**/*.zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Development deployment completed!"
                    echo "üåê URL: https://$(webAppDev).azurewebsites.net"
                  displayName: 'Deployment Summary'
                  shell: bash

  # ============================================
  # STAGE 3: DEPLOY TO STAGING
  # ============================================
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: DeployDev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
    jobs:
      - deployment: DeployStagingJob
        environment: 'Staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "üîç Checking if package exists..."
                    ls -l $(Pipeline.Workspace)/drop
                  displayName: 'Verify artifact path'
                  shell: bash

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Staging)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionStg)'
                    appType: 'webAppLinux'
                    appName: '$(webAppStaging)'
                    resourceGroupName: '$(rgStaging)'
                    package: '$(Pipeline.Workspace)/drop/**/*.zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Staging deployment completed!"
                    echo "üåê URL: https://$(webAppStaging).azurewebsites.net"
                  displayName: 'Deployment Summary'
                  shell: bash

  # ============================================
  # STAGE 4: DEPLOY TO PRODUCTION SLOT
  # ============================================
  - stage: DeployProdSlot
    displayName: 'Deploy to Production Slot'
    dependsOn: DeployStaging
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployProdSlotJob
        environment: 'Production-Slot'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    echo "üîç Checking if package exists..."
                    ls -l $(Pipeline.Workspace)/drop
                  displayName: 'Verify artifact path'
                  shell: bash

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App Slot (Prod)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionProd)'
                    appType: 'webAppLinux'
                    appName: '$(webAppProd)'
                    resourceGroupName: '$(rgProd)'
                    package: '$(Pipeline.Workspace)/drop/**/*.zip'
                    runtimeStack: 'NODE|22-lts'
                    deployToSlotOrASE: true
                    slotName: '$(slotName)'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Deployed to production slot!"
                    echo "üåê Slot URL: https://$(webAppProd)-$(slotName).azurewebsites.net"
                    echo "üïê Waiting for approval before swapping to production..."
                  displayName: 'Slot Deployment Summary'
                  shell: bash

  # ============================================
  # STAGE 5: APPROVAL & SWAP TO PRODUCTION
  # ============================================
  - stage: ApproveAndSwap
    displayName: 'Approve Swap to Production'
    dependsOn: DeployProdSlot
    condition: succeeded()
    jobs:
      - job: ManualApproval
        displayName: 'Manual Approval Required'
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Manual Approval Before Swap'
            inputs:
              instructions: |
                Please validate the deployed app in the production slot:
                üëâ https://cloudcart-prod-webapp-slot.azurewebsites.net
                
                Approve to proceed with the swap to the main production app.
              onTimeout: 'reject'

      - deployment: SwapToProduction
        displayName: 'Swap Production Slot to Live'
        dependsOn: ManualApproval
        condition: succeeded()
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slot (Slot ‚Üí Production)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionProd)'
                    Action: 'Swap Slots'
                    WebAppName: '$(webAppProd)'
                    ResourceGroupName: '$(rgProd)'
                    SourceSlot: '$(slotName)'
                    SwapWithProduction: true

                - script: |
                    echo "üéâ Production deployment successful!"
                    echo "üåê Production URL: https://$(webAppProd).azurewebsites.net"
                  displayName: 'Swap Summary'
                  shell: bash
