# azure-pipelines.yml
# CloudCart CI/CD Pipeline - Branch-based Deployment (Dev ‚Üí Staging ‚Üí Prod Slot ‚Üí Swap)

trigger:
  branches:
    include:
      - main
      - staging
      - develop

# Disable PR triggers
pr: none

# Use self-hosted agent globally
pool:
  name: SandboxAgent

variables:
  # Azure Service Connections
  azureSubDev: 'Azure-CloudCart-Connection'
  azureSubStg: 'Azure-CloudCart-Connection-stg'
  azureSubProd: 'Azure-CloudCart-Connection-prod'

  # Resource Groups
  rgDev: 'rg-cloudcart-dev'
  rgStaging: 'rg-cloudcart-staging'
  rgProd: 'rg-cloudcart-prod'

  # Web Apps
  webAppDev: 'cloudcart-dev-webapp'
  webAppStaging: 'cloudcart-staging-webapp'
  webAppProd: 'cloudcart-prod-webapp'

  # Production Slot
  slotName: 'slot'
  slotUrl: 'https://cloudcart-prod-webapp-slot.azurewebsites.net'

  # Node version
  nodeVersion: '22.x'

# ============================================
# STAGE 1: BUILD
# ============================================
stages:
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildJob
        displayName: 'Build Node.js App'
        steps:
          - checkout: self
            displayName: 'Checkout Repository'

          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - script: |
              echo "üì¶ Installing dependencies..."
              npm ci --production
            displayName: 'Install Dependencies'

          - script: |
              echo "üß™ Running tests..."
              npm test || echo "No tests found or tests failed"
            displayName: 'Run Tests'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Application Files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

# ============================================
# STAGE 2: DEPLOY TO DEVELOPMENT
# ============================================
  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployDevJob
        displayName: 'Deploy to Dev Environment'
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Dev)'
                  inputs:
                    azureSubscription: '$(azureSubDev)'
                    appType: 'webAppLinux'
                    appName: '$(webAppDev)'
                    resourceGroupName: '$(rgDev)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Development deployment completed!"
                    echo "üåê URL: https://$(webAppDev).azurewebsites.net"
                  displayName: 'Deployment Summary'

# ============================================
# STAGE 3: DEPLOY TO STAGING
# ============================================
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
    jobs:
      - deployment: DeployStagingJob
        displayName: 'Deploy to Staging Environment'
        environment: 'Staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Staging)'
                  inputs:
                    azureSubscription: '$(azureSubStg)'
                    appType: 'webAppLinux'
                    appName: '$(webAppStaging)'
                    resourceGroupName: '$(rgStaging)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Staging deployment completed!"
                    echo "üåê URL: https://$(webAppStaging).azurewebsites.net"
                  displayName: 'Deployment Summary'

# ============================================
# STAGE 4: DEPLOY TO PRODUCTION SLOT
# ============================================
  - stage: DeployProdSlot
    displayName: 'Deploy to Production Slot'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployProdSlotJob
        displayName: 'Deploy to Production Slot'
        environment: 'Production Slot'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Production Slot (cloudcart-prod-webapp/slot)'
                  inputs:
                    azureSubscription: '$(azureSubProd)'
                    appType: 'webAppLinux'
                    appName: '$(webAppProd)'
                    resourceGroupName: '$(rgProd)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    deployToSlotOrASE: true
                    slotName: '$(slotName)'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'

                - script: |
                    echo "‚úÖ Deployed to Production Slot!"
                    echo "üåê Slot URL: $(slotUrl)"
                    echo "‚è≥ Awaiting approval to swap slot to live production..."
                  displayName: 'Slot Deployment Summary'

# ============================================
# STAGE 5: MANUAL APPROVAL & SWAP TO PRODUCTION
# ============================================
  - stage: Swap_Slot
    displayName: 'Manual Approval & Swap to Production'
    dependsOn: DeployProdSlot
    condition: succeeded()
    jobs:
      - deployment: SwapJob
        displayName: 'Swap Slot to Production'
        environment: 'production'   # üëà Configure manual approval in this environment (via DevOps UI)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slot to Live Production'
                  inputs:
                    azureSubscription: '$(azureSubProd)'
                    Action: 'Swap Slots'
                    WebAppName: '$(webAppProd)'
                    ResourceGroupName: '$(rgProd)'
                    SourceSlot: '$(slotName)'
                    SwapWithProduction: true

                - script: |
                    echo "üéâ Production swap successful!"
                    echo "üåê Live URL: https://$(webAppProd).azurewebsites.net"
                    echo "üìã Previous version now available in slot for quick rollback."
                  displayName: 'Swap Summary'
