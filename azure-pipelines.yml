# azure-pipelines.yml
# CloudCart CI/CD Pipeline - Progressive deployment with artifact promotion

trigger:
  branches:
    include:
      - main
      - staging
      - develop

pr: none

pool:
  name: SandboxAgent

variables:
  # Azure Service Connections (one per resource group)
  azureSubscriptionDev: 'Azure-CloudCart-Connection'
  azureSubscriptionStaging: 'Azure-CloudCart-Connection-stg'
  azureSubscriptionProd: 'Azure-CloudCart-Connection-prod'
  
  # Resource Groups
  rgDev: 'rg-cloudcart-dev'
  rgStaging: 'rg-cloudcart-staging'
  rgProd: 'rg-cloudcart-prod'
  
  # Web App Names
  webAppDev: 'cloudcart-dev-webapp'
  webAppStaging: 'cloudcart-staging-webapp'
  webAppProd: 'cloudcart-prod-webapp'
  slotName: 'slot'
  
  # Node version
  nodeVersion: '22.x'

# ============================================
# STAGE 1: BUILD
# ============================================
stages:
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: BuildJob
        displayName: 'Build Node.js App'
        steps:
          - checkout: self
            displayName: 'Checkout Repository'
          
          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - script: |
              echo "üì¶ Installing dependencies..."
              npm ci || npm install
            displayName: 'Install Dependencies'

          - script: |
              echo "üß™ Running tests..."
              npm test
            displayName: 'Run Tests'
            continueOnError: true

          - task: ArchiveFiles@2
            displayName: 'Archive Application Files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              replaceExistingArchive: true
              verbose: true
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Build Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

# ============================================
# STAGE 2: DEPLOY TO DEVELOPMENT
# ============================================
  - stage: DeployDev
    displayName: 'Deploy to Development'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - deployment: DeployDevJob
        displayName: 'Deploy to Dev Environment'
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Dev)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionDev)'
                    appType: 'webAppLinux'
                    appName: '$(webAppDev)'
                    resourceGroupName: '$(rgDev)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'
                
                - script: |
                    echo "‚úÖ Development deployment completed!"
                    echo "üåê URL: https://$(webAppDev).azurewebsites.net"
                  displayName: 'Deployment Summary'

# ============================================
# STAGE 3: DEPLOY TO STAGING (from artifact)
# ============================================
  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: 
      - Build
      - DeployDev
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/staging'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main')
        )
      )
    jobs:
      - deployment: DeployStagingJob
        displayName: 'Deploy to Staging Environment'
        environment: 'Staging'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App (Staging)'
                  inputs:
                    azureSubscription: '$(azureSubscriptionStaging)'
                    appType: 'webAppLinux'
                    appName: '$(webAppStaging)'
                    resourceGroupName: '$(rgStaging)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    runtimeStack: 'NODE|22-lts'
                    startUpCommand: 'npm start'
                
                - script: |
                    echo "‚úÖ Staging deployment completed!"
                    echo "üåê URL: https://$(webAppStaging).azurewebsites.net"
                  displayName: 'Deployment Summary'

# ============================================
# STAGE 4: DEPLOY TO PRODUCTION SLOT (from artifact)
# ============================================
  - stage: DeployProdSlot
    displayName: 'Deploy to Production Slot'
    dependsOn: 
      - Build
      - DeployStaging
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployProdSlotJob
        displayName: 'Deploy to Production Slot'
        environment: 'Production-Slot'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy to Production Slot'
                  inputs:
                    azureSubscription: '$(azureSubscriptionProd)'
                    appType: 'webAppLinux'
                    appName: '$(webAppProd)'
                    resourceGroupName: '$(rgProd)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    runtimeStack: 'NODE|22-lts'
                    deployToSlotOrASE: true
                    slotName: '$(slotName)'
                    startUpCommand: 'npm start'
                
                - script: |
                    echo "‚úÖ Deployed to production slot!"
                    echo "üåê Slot URL: https://$(webAppProd)-$(slotName).azurewebsites.net"
                    echo "‚è≥ Please test the slot before approving swap to production"
                  displayName: 'Slot Deployment Summary'

# ============================================
# STAGE 5: MANUAL APPROVAL GATE
# ============================================
  - stage: ApproveSwap
    displayName: 'Approve Production Swap'
    dependsOn: DeployProdSlot
    condition: succeeded()
    jobs:
      - job: WaitForApproval
        displayName: 'Manual Approval Required'
        pool: server
        timeoutInMinutes: 1440 # 24 hours
        steps:
          - task: ManualValidation@0
            displayName: 'Approve Slot Swap to Production'
            inputs:
              notifyUsers: ''
              instructions: |
                üß™ VERIFICATION REQUIRED
                
                Please test the production slot before approving:
                https://$(webAppProd)-$(slotName).azurewebsites.net
                
                Checklist:
                ‚úì Application loads correctly
                ‚úì All features work as expected
                ‚úì Environment badge shows correct environment
                ‚úì No console errors
                ‚úì API endpoints respond correctly
                
                ‚úÖ APPROVE: Swap slot to production
                ‚ùå REJECT: Keep current production version
              onTimeout: 'reject'

# ============================================
# STAGE 6: SWAP SLOT TO PRODUCTION
# ============================================
  - stage: SwapToProduction
    displayName: 'Swap Slot to Production'
    dependsOn: ApproveSwap
    condition: succeeded()
    jobs:
      - deployment: SwapSlotsJob
        displayName: 'Swap Production Slot'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureAppServiceManage@0
                  displayName: 'Swap Slot to Production'
                  inputs:
                    azureSubscription: '$(azureSubscriptionProd)'
                    Action: 'Swap Slots'
                    WebAppName: '$(webAppProd)'
                    ResourceGroupName: '$(rgProd)'
                    SourceSlot: '$(slotName)'
                    SwapWithProduction: true
                
                - script: |
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL!"
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                    echo ""
                    echo "üåê Production URL:"
                    echo "   https://$(webAppProd).azurewebsites.net"
                    echo ""
                    echo "üìã Deployment Details:"
                    echo "   Build ID: $(Build.BuildId)"
                    echo "   Commit: $(Build.SourceVersion)"
                    echo "   Branch: $(Build.SourceBranch)"
                    echo ""
                    echo "üìù Rollback Information:"
                    echo "   Previous version now in slot for quick rollback"
                    echo "   Slot URL: https://$(webAppProd)-$(slotName).azurewebsites.net"
                    echo ""
                    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                  displayName: 'Production Deployment Summary'
