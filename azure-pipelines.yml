trigger:
  branches:
    include:
      - main
      - staging
      - develop

pool:
  name: 'SandboxAgent'

variables:
  # Azure Service Connections
  azureSubDev: 'Azure-CloudCart-Connection'
  azureSubStg: 'Azure-CloudCart-Connection-stg'
  azureSubProd: 'Azure-CloudCart-Connection-prod'

  # Resource Groups
  rgDev: 'rg-cloudcart-dev'
  rgStaging: 'rg-cloudcart-staging'
  rgProd: 'rg-cloudcart-prod'

  # Web App Names
  webAppDev: 'cloudcart-dev-webapp'
  webAppStaging: 'cloudcart-staging-webapp'
  webAppProd: 'cloudcart-prod-webapp'

  # Node version
  nodeVersion: '22.x'
  artifactName: 'drop'

# -------------------------------
# STAGE 1: BUILD
# -------------------------------
stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: BuildJob
    displayName: 'Build Node.js App'
    steps:
    - checkout: self

    - task: NodeTool@0
      displayName: 'Install Node.js $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'

    - script: |
        echo "Installing dependencies..."
        npm install --production
      displayName: 'npm install'

    - task: ArchiveFiles@2
      displayName: 'Archive App Files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'

# -------------------------------
# STAGE 2: DEV DEPLOYMENT
# -------------------------------
- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - job: DeployDevJob
    displayName: 'Deploy to Dev Environment'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App (Dev)'
      inputs:
        azureSubscription: '$(azureSubDev)'
        appType: 'webAppLinux'
        appName: '$(webAppDev)'
        resourceGroupName: '$(rgDev)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# -------------------------------
# STAGE 3: STAGING DEPLOYMENT
# -------------------------------
- stage: DeployStaging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/staging'))
  jobs:
  - job: DeployStagingJob
    displayName: 'Deploy to Staging Environment'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App (Staging)'
      inputs:
        azureSubscription: '$(azureSubStg)'
        appType: 'webAppLinux'
        appName: '$(webAppStaging)'
        resourceGroupName: '$(rgStaging)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# -------------------------------
# STAGE 4: PRODUCTION SLOT DEPLOYMENT
# -------------------------------
- stage: DeployProdSlot
  displayName: 'Deploy to Production Slot'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: DeployProdSlotJob
    displayName: 'Deploy to Production Slot'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Azure Web App Slot (Prod)'
      inputs:
        azureSubscription: '$(azureSubProd)'
        appType: 'webAppLinux'
        appName: '$(webAppProd)'
        resourceGroupName: '$(rgProd)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        deployToSlotOrASE: true
        slotName: 'production-slot'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# -------------------------------
# STAGE 5: MANUAL APPROVAL & SLOT SWAP
# -------------------------------
- stage: SwapToProduction
  displayName: 'Manual Approval: Swap Slot to Production'
  dependsOn: DeployProdSlot
  condition: succeeded()
  jobs:
  - deployment: SwapSlotsJob
    displayName: 'Swap Slot to Production'
    environment: 'production'   # ðŸ‘ˆ Manual approval gate here
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slot to Production'
            inputs:
              azureSubscription: '$(azureSubProd)'
              Action: 'Swap Slots'
              WebAppName: '$(webAppProd)'
              ResourceGroupName: '$(rgProd)'
              SourceSlot: 'production-slot'
              SwapWithProduction: true
