trigger:
  branches:
    include:
      - main
      - staging
      - develop

# Use your self-hosted agent once
pool:
  name: SandboxAgent

variables:
  artifactName: 'drop'
  buildConfiguration: 'Release'

  # Azure service connections
  azureSubDev: 'Azure-CloudCart-Connection'
  azureSubStg: 'Azure-CloudCart-Connection-stg'
  azureSubProd: 'Azure-CloudCart-Connection-prod'

  # Web apps and resource groups
  webAppDev: 'cloudcart-dev-webapp'
  rgDev: 'rg-cloudcart-dev'

  webAppStg: 'cloudcart-stg-webapp'
  rgStg: 'rg-cloudcart-stg'

  webAppProd: 'cloudcart-prod-webapp'
  rgProd: 'rg-cloudcart-prod'
  slotName: 'slot'

stages:

# ------------------ BUILD STAGE ------------------
- stage: Build
  displayName: 'Build and Publish Artifact'
  jobs:
  - job: BuildJob
    steps:
    - checkout: self

    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build
      displayName: 'Build Application'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      artifact: $(artifactName)

# ------------------ DEV DEPLOY ------------------
- stage: Deploy_Dev
  displayName: 'Deploy to Dev Environment'
  dependsOn: Build
  jobs:
  - job: DeployDev
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Dev Web App'
      inputs:
        azureSubscription: '$(azureSubDev)'
        appType: 'webAppLinux'
        appName: '$(webAppDev)'
        resourceGroupName: '$(rgDev)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# ------------------ STAGING DEPLOY ------------------
- stage: Deploy_Staging
  displayName: 'Deploy to Staging Environment'
  dependsOn: Deploy_Dev
  condition: succeeded()
  jobs:
  - job: DeployStg
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Staging Web App'
      inputs:
        azureSubscription: '$(azureSubStg)'
        appType: 'webAppLinux'
        appName: '$(webAppStg)'
        resourceGroupName: '$(rgStg)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# ------------------ PROD SLOT DEPLOY ------------------
- stage: Deploy_Prod_Slot
  displayName: 'Deploy to Production Slot'
  dependsOn: Deploy_Staging
  condition: succeeded()
  jobs:
  - job: DeployProdSlot
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: $(artifactName)
        path: $(Pipeline.Workspace)/$(artifactName)

    - task: AzureWebApp@1
      displayName: 'Deploy to Production Slot'
      inputs:
        azureSubscription: '$(azureSubProd)'
        appType: 'webAppLinux'
        appName: '$(webAppProd)'
        resourceGroupName: '$(rgProd)'
        slotName: '$(slotName)'
        package: '$(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip'
        runtimeStack: 'NODE|22-lts'
        startUpCommand: 'npm start'

# ------------------ MANUAL APPROVAL + SLOT SWAP ------------------
- stage: Swap_Slot
  displayName: 'Manual Approval & Swap to Production'
  dependsOn: Deploy_Prod_Slot
  condition: succeeded()
  approval:
    approvals:
      - type: Manual
        approvers:
          - your.name@yourcompany.com   # ðŸ‘ˆ change this to your approver email
  jobs:
  - job: Swap
    steps:
    - task: AzureAppServiceManage@0
      displayName: 'Swap Production Slot to Live'
      inputs:
        azureSubscription: '$(azureSubProd)'
        WebAppName: '$(webAppProd)'
        ResourceGroupName: '$(rgProd)'
        SourceSlot: '$(slotName)'
        Action: 'Swap Slots'
